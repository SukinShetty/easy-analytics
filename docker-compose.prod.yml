version: '3.8'

services:
  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: easy_analytics_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - tooljet
    restart: unless-stopped
    networks:
      - easy_analytics_network

  # ToolJet Application
  tooljet:
    image: tooljet/tooljet-ce:latest
    container_name: easy_analytics_app
    environment:
      - TOOLJET_HOST=${TOOLJET_HOST:-https://localhost}
      - PG_HOST=postgres
      - PG_DB=${PG_DB:-tooljet_prod}
      - PG_USER=${PG_USER:-postgres}
      - PG_PASS=${PG_PASS}
      - TOOLJET_DB_HOST=postgres
      - TOOLJET_DB=${TOOLJET_DB:-tooljet_prod}
      - TOOLJET_DB_USER=${TOOLJET_DB_USER:-postgres}
      - TOOLJET_DB_PASS=${TOOLJET_DB_PASS}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - LOCKBOX_MASTER_KEY=${LOCKBOX_MASTER_KEY}
      - FRESHWORKS_DOMAIN=${FRESHWORKS_DOMAIN}
      - FRESHWORKS_API_KEY=${FRESHWORKS_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NODE_ENV=production
      - ENABLE_TOOLJET_DB=true
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - easy_analytics_network
    volumes:
      - tooljet_uploads:/app/uploads
      - ./logs/tooljet:/app/logs

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: easy_analytics_db
    environment:
      POSTGRES_DB: ${PG_DB:-tooljet_prod}
      POSTGRES_USER: ${PG_USER:-postgres}
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./db_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./scripts/backup.sh:/scripts/backup.sh:ro
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER:-postgres} -d ${PG_DB:-tooljet_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - easy_analytics_network
    command: |
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: easy_analytics_cache
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - easy_analytics_network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: easy_analytics_backup
    environment:
      PGPASSWORD: ${PG_PASS}
      POSTGRES_DB: ${PG_DB:-tooljet_prod}
      POSTGRES_USER: ${PG_USER:-postgres}
      POSTGRES_HOST: postgres
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - easy_analytics_network
    entrypoint: |
      sh -c '
        echo "0 2 * * * /scripts/backup.sh" | crontab -
        crond -f
      '

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: easy_analytics_monitoring
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - easy_analytics_network

  # Log Management
  logrotate:
    image: alpine:latest
    container_name: easy_analytics_logrotate
    volumes:
      - ./logs:/logs
      - ./scripts/logrotate.conf:/etc/logrotate.conf:ro
    restart: unless-stopped
    entrypoint: |
      sh -c '
        echo "0 0 * * * logrotate /etc/logrotate.conf" | crontab -
        crond -f
      '

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  tooljet_uploads:
    driver: local
  prometheus_data:
    driver: local

networks:
  easy_analytics_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 